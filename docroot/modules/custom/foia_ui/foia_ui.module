<?php

/**
 * @file
 * FOIA UI module hook implementations.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_toolbar_alter().
 */
function foia_ui_toolbar_alter(&$items) {
  $current_user = \Drupal::currentUser();

  $empty_item_cacheability = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
      ],
    ],
  ];

  if ($current_user->hasPermission('access openapi api docs')) {
    $items['foia_api'] = [
      '#type' => 'toolbar_item',
      'tab' => [
        '#type' => 'link',
        '#title' => t('API'),
        '#url' => Url::fromRoute('foia_ui.api'),
        '#options' => [
          'set_active_class' => TRUE,
        ],
        '#attributes' => [
          'class' => ['toolbar-icon', 'toolbar-icon-system-modules-list'],
        ],
      ],
      '#weight' => -30,
    ];
  }
  else {
    $items['reservoir_api'] = $empty_item_cacheability;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function foia_ui_form_taxonomy_term_agency_form_alter(&$form, FormStateInterface $form_state) {
  $form['status']['widget']['value']['#description'] = 'IMPORTANT NOTE: Please do NOT uncheck this box! Unpublished agencies can interfere with critical site functionality.';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function foia_ui_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node->getType() == 'annual_foia_report_data') {
    $form['actions']['validate_button'] = [
      '#type' => 'button',
      '#value' => t('Validate'),
      '#attached' => [
        'library' => [
          'foia_ui/jquery_validation',
          'foia_ui/foia_ui_validation',
          'foia_ui/foia_ui_admin',
          'foia_ui/foia_ui_utility',
        ],
        'drupalSettings' => [
          'foiaUI' => [
            'foiaUISettings' => [
              'formID' => '#' . $form['#id'],
            ],
          ],
        ],
      ],
    ];
    if (!empty($form['field_foia_xiie2']['widget'])) {
      foreach ($form['field_foia_xiie2']['widget'] as $key => &$element) {
        if (is_int($key)) {
          $element['subform']['field_back_cur_yr']['widget']['0']['value']['#title'] = "Number of Backlogged Appeals as of End of the Fiscal Year from Current Annual Report";
          $element['subform']['field_back_prev_yr']['widget']['0']['value']['#title'] = "Number of Backlogged Appeals as of End of the Fiscal Year from Previous Annual Report";
        }
      }
    }
    $form['meta']['changed']['#markup'] = "<h4 class='label inline'>" . $form['meta']['changed']['#title'] . "</h4> " . $form['meta']['changed']['#markup'];
    $form['meta']['author']['#markup'] = "<h4 class='label inline'>" . $form['meta']['author']['#title'] . "</h4> " . $form['meta']['author']['#markup'];
    unset($form['meta']['changed']['#title']);
    unset($form['meta']['author']['#title']);

    // Wrap the moderation state form element in a fieldset so that it's
    // description is displayed, fixing broken aria-described by references.
    foreach (Element::children($form['moderation_state']['widget']) as $key => $element) {
      $form['moderation_state']['widget'][$key]['#theme_wrappers'][] = 'fieldset';
    }
  }
}

/**
 * Implements template_preprocess_details().
 */
function foia_ui_preprocess_details(&$variables) {
  if (isset($variables['element']['#entity_type'])) {
    $entity_type = $variables['element']['#entity_type'];
    if (isset($variables['element']['#bundle'])) {
      $bundle = $variables['element']['#bundle'];
      $problem_types = [
        'processed_requests_vii',
        'oldest_days',
        'foia_xii_received_proc',
      ];
      if ($entity_type == 'paragraph' && in_array($bundle, $problem_types)) {
        $context_id = '';
        foreach ($variables['element'] as $key => $value) {
          if ('field' == substr($key, 0, 5)) {
            $context_id = $value['#parents'][0];
            break;
          }
        }
        // Append parent form ID to generate unique fragment IDs on nested
        // vertical tabs using paragraphs.
        $variables['attributes']['id'] = $variables['attributes']['id'] . '--' . $context_id;
      }
    }
  }
}

/**
 * Implements template_preprocess_field_multiple_value_form().
 */
function foia_ui_preprocess_field_multiple_value_form(&$variables) {
  if (!foia_ui_page_is_annual_foia_report_data_form()) {
    return;
  }

  // Add a colgroup to the table with the same number of <col> elements as
  // there are columns in the first row of data.  This allows styling the
  // table-layout as fixed and setting widths on <col> elements for better
  // responsiveness of paragraph tables.
  // @see foia_ui_admin.css
  $row_columns = $variables['table']['#rows'][0]['data'] ?? FALSE;
  $colgroups = $variables['table']['#colgroups'] ?? FALSE;
  if ($row_columns && !$colgroups) {
    $variables['table']['#colgroups'] = [
      [
        'data' => array_fill(0, count($row_columns), []),
      ],
    ];
  }
}

/**
 * Determine if the current page is an annual report node add/edit form.
 *
 * @return bool
 *   TRUE if this is a node add or edit form for an annual foia report data
 *   node.
 */
function foia_ui_page_is_annual_foia_report_data_form() {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Depending on the route, the node_type or node parameter will exist in
  // the routes parameters.  Use the existing parameter to determine the
  // type of node being created or edited.
  if ($route_name === 'entity.node.edit_form') {
    $node = \Drupal::routeMatch()->getParameter('node');
    $node_type = $node instanceof Node ? $node->getType() : FALSE;
  }

  if ($route_name === 'node.add') {
    $node_type = \Drupal::routeMatch()->getParameter('node_type');
    $node_type = $node_type instanceof NodeType ? $node_type->get('type') : FALSE;
  }

  return isset($node_type) && $node_type === 'annual_foia_report_data';
}
