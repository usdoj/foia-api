<?php

/**
 * @file
 * FOIA Users Access Module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;

/**
 * Validates Office NID matching for users.
 */
function foia_users_agency_user_nid_access($node, $account) {
  $user = User::load(\Drupal::currentUser()->id());
  // Get the user's Agency association.
  $user_agency = $user->get('field_agency')->target_id;
  // Get the node's Agency association.
  $node_agency = $node->get('field_agency')->target_id;

  if ($user_agency === $node_agency) {
    $result = AccessResult::allowed()
      ->cachePerUser()
      ->addCacheableDependency($node);
  }
  else {
    $result = AccessResult::forbidden()
      ->cachePerUser()
      ->addCacheableDependency($node);
  }

  return $result;
}

/**
 * Implements hook_node_access().
 */
function foia_users_node_access($node, $op, $account) {

  // Restrict editing node based on matching of 'field_agency' entity reference.
  if ($node->bundle() == 'agency_component') {
    // Get the current user's roles.
    $user = User::load(\Drupal::currentUser()->id());
    $user_roles = $user->getRoles();

    if (in_array("agency_manager", $user_roles)) {
      switch ($op) {
        case 'update':
          // Check if the user has the proper Agency association.
          return foia_users_agency_user_nid_access($node, $account);

        case 'delete':
          return AccessResult::forbidden()
            ->cachePerUser()
            ->addCacheableDependency($node);

        default:
          return AccessResult::neutral();
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_taxonomy_term_access().
 */
function foia_users_taxonomy_term_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Get the term ID.
  $term_id = $entity->id();
  // Get the current user's roles.
  $user = User::load(\Drupal::currentUser()->id());
  $user_roles = $user->getRoles();
  // Get the current user's agency.
  $user_agency = $user->get('field_agency')->target_id;

  if ($term_id === $user_agency && in_array('agency_manager', $user_roles)) {
    switch ($operation) {
      case 'update':
        return AccessResult::allowed()
          ->cachePerUser()
          ->addCacheableDependency($entity);

      case 'delete':
        return AccessResult::forbidden()
          ->cachePerUser()
          ->addCacheableDependency($entity);

      default:
        return AccessResult::neutral();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_user_access().
 */
function foia_users_user_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Get the current user's roles.
  $current_user = User::load(\Drupal::currentUser()->id());
  $current_user_roles = $current_user->getRoles();

  // If the current user is an Agency Administrator check access.
  if (in_array('agency_administrator', $current_user_roles) && ($current_user->id() !== $entity->id())) {
    switch ($operation) {
      case 'update':
      case 'delete':
        return foia_users_check_agency_administrator_access($entity);

      default:
        return AccessResult::neutral();
    }
  }

  return AccessResult::neutral();
}

/**
 * Grants or denies access for an Agency Administrator based on the user's role.
 *
 * @param \Drupal\Core\Entity\EntityInterface $user
 *   The user that we are checking.
 *
 * @return \Drupal\Core\Access\AccessResult
 *   Returns the AccessResult
 */
function foia_users_check_agency_administrator_access(EntityInterface $user) {
  $access = AccessResult::neutral();

  // Ensure that we are checking a user.
  if ($user->bundle() === 'user') {
    $user_roles = $user->getRoles();
    $is_agency_manager = (in_array('agency_manager', $user_roles)) ? TRUE : FALSE;

    // If the user is an agency manager allow access.
    if ($is_agency_manager) {
      $access = AccessResult::allowed()
        ->cachePerUser()
        ->addCacheableDependency($user);
    }
    else {
      $access = AccessResult::forbidden()
        ->cachePerUser()
        ->addCacheableDependency($user);
    }
  }

  return $access;
}

/**
 * Custom submit handler for agency value.
 */
function foia_users_form_validation_foia_agency($form, $form_state) {
  if ($form_state->hasValue('field_agency')) {
    $user_roles = $form_state->getValue('roles');
    $user_agency = $form_state->getValue('field_agency')[0]['target_id'];
    $user_role_match = FALSE;
    if (is_array($user_roles)) {
      $user_role_match = in_array('agency_manager', $user_roles) ? TRUE : $user_role_match;
    }

    if (is_null($user_agency) && ($user_role_match)) {
      $form['field_agency']['widget']['#required'] = TRUE;
      $form_state->setErrorByName('field_agency', t('Users with the "Agency Manager" role must be assigned to an agency.'));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function foia_users_form_alter(&$form, $form_state, $form_id) {
  $current_user = User::load(\Drupal::currentUser()->id());
  $current_user_roles = $current_user->getRoles();
  $is_agency_admin = in_array('agency_administrator', $current_user_roles);

  // We are checking for the proper roles to make Foia office required.
  if ($form_id == ('user_form' || 'user_register_form')) {
    $form['#validate'][] = 'foia_users_form_validation_foia_agency';
  }

  if ($form_id === 'user_register_form') {
    // Check the Agency Manager checkbox.
    if ($is_agency_admin) {
      $form['account']['roles']['#default_value'][] = 'agency_manager';
    }
  }

  if ($form_id === 'user_form' && $is_agency_admin) {
    $user = \Drupal::routeMatch()->getParameter('user');
    $uid = $user->id();
    if ($uid && $uid === $current_user->id()) {
      $form['account']['roles']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function foia_users_module_implements_alter(&$implementations, $hook) {
  // Make sure that our form_alter happens after the Role Assign form alter.
  if ($hook === 'form_alter') {
    $group = $implementations['foia_users'];
    unset($implementations['foia_users']);
    $implementations['foia_users'] = $group;
  }
}
